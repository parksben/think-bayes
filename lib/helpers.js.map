{"version":3,"sources":["../src/helpers.js"],"names":["odds","p","RangeError","Infinity","math","div","sub","probability","o","add","probability2","yes","no","percentile","pmf","percentage","total","items","val","prob","ValueError","credibleInterval","cdf","makeCdf","interval","value","pmfProbLess","pmf1","pmf2","v1","p1","v2","p2","mult","pmfProbGreater","pmfProbEqual","randomSum","dists","reduce","prev","curr","random","sampleSum","n","list","Array","fill","map","evalGaussianPdf","x","mu","sigma","makeGaussianPdf","numSigmas","Pmf","low","high","set","normalize","evalBinomialPmf","k","evalPoissonPmf","lam"],"mappings":"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","sourcesContent":["import { ValueError } from './utils';\nimport math from './math';\nimport { makePmfFromList } from './convertors';\nimport Pmf from './Pmf';\nimport { linspace } from './algorithm/num';\nimport { normalPdf } from './algorithm/normal';\nimport { binomialPmf } from './algorithm/binomial';\nimport { poissonPmf } from './algorithm/poisson';\n\n/**\n * Computes odds for a given probability.\n * Example: p=0.75 means 75 for and 25 against, or 3:1 odds in favor.\n * Note: when p=1, the formula for odds divides by zero, which is\n * normally undefined.  But I think it is reasonable to define Odds(1)\n * to be infinity, so that's what this function does.\n * @param {number} p float 0~1\n * @returns float odds\n */\nexport const odds = p => {\n  if (!p || p < 0 || p > 1)\n    throw new RangeError(\n      'Value of the probability must be a number greater than 0 and less than 1.'\n    );\n  return p === 1 ? Infinity : math.div(p, math.sub(1, p));\n};\n\n/**\n * Computes the probability corresponding to given odds.\n * Example: o=2 means 2:1 odds in favor, or 2/3 probability\n * @param {number} o float odds, strictly positive\n * @returns float probability\n */\nexport const probability = o => {\n  if (!o || o < 0)\n    throw new RangeError('Value of the odds must be a positive number.');\n  return math.div(o, math.add(o, 1));\n};\n\n/**\n * Computes the probability corresponding to given odds.\n * Example: yes=2, no=1 means 2:1 odds in favor, or 2/3 probability.\n * @param {number} yes int or float odds in favor\n * @param {number} no int or float odds in favor\n */\nexport const probability2 = (yes, no) => {\n  if (!yes || yes < 0 || !no || no < 0)\n    throw new RangeError('Value of the odds must be a positive number.');\n  return math.div(yes, math.add(yes, no));\n};\n\n/**\n * Computes a percentile of a given Pmf.\n * @param {pmf} pmf\n * @param {number} percentage float 0-100\n */\nexport const percentile = (pmf, percentage) => {\n  if (p < 0 || p > 100)\n    throw new RangeError(\n      'Value of the probability must be a number greater than 0 and less than 1.'\n    );\n\n  const p = percentage / 100;\n  let total = 0;\n  for (let [val, prob] of pmf.items()) {\n    total = math.add(total, prob);\n    if (total > p) return val;\n  }\n\n  throw new ValueError(\n    `Value not found in pmf for percentage: \\`${percentage}\\`, which means the total probability of pmf is less than ${percentage /\n      100}.`\n  );\n};\n\n/**\n * Computes a credible interval for a given distribution.\n * If percentage=90, computes the 90% CI.\n * @param {pmf} pmf Pmf object representing a posterior distribution\n * @param {number} percentage float between 0 and 100\n * @returns sequence of two floats, low and high\n */\nexport const credibleInterval = (pmf, percentage = 90) => {\n  const cdf = pmf.makeCdf();\n  // prob = (1 - percentage / 100.0) / 2\n  const prob = math.div(math.sub(1, math.div(percentage, 100)), 2);\n  const interval = [cdf.value(prob), cdf.value(math.sub(1, prob))];\n  return interval;\n};\n\n/**\n * Probability that a value from pmf1 is less than a value from pmf2.\n * @param {pmf} pmf1 Pmf object\n * @param {pmf} pmf2 Pmf object\n * @returns float probability\n */\nexport const pmfProbLess = (pmf1, pmf2) => {\n  let total = 0;\n  for (let [v1, p1] of pmf1.items()) {\n    for (let [v2, p2] of pmf2.items()) {\n      if (v1 < v2) total = math.add(total, math.mult(p1, p2));\n    }\n  }\n  return total;\n};\n\n/**\n * Probability that a value from pmf1 is greater than a value from pmf2.\n * @param {pmf} pmf1 Pmf object\n * @param {pmf} pmf2 Pmf object\n * @returns float probability\n */\nexport const pmfProbGreater = (pmf1, pmf2) => {\n  let total = 0;\n  for (let [v1, p1] of pmf1.items()) {\n    for (let [v2, p2] of pmf2.items()) {\n      if (v1 > v2) total = math.add(total, math.mult(p1, p2));\n    }\n  }\n  return total;\n};\n\n/**\n * Probability that a value from pmf1 equals a value from pmf2.\n * @param {pmf} pmf1 Pmf object\n * @param {pmf} pmf2 Pmf object\n * @returns float probability\n */\nexport const pmfProbEqual = (pmf1, pmf2) => {\n  let total = 0;\n  for (let [v1, p1] of pmf1.items()) {\n    for (let [v2, p2] of pmf2.items()) {\n      if (v1 === v2) total = math.add(total, math.mult(p1, p2));\n    }\n  }\n  return total;\n};\n\n/**\n * Chooses a random value from each dist and returns the sum.\n * @param {array} dists sequence of Pmf or Cdf objects\n * @returns numerical sum\n */\nexport const randomSum = dists => {\n  const total = dists.reduce((prev, curr) => math.add(prev, curr.random()), 0);\n  return total;\n};\n\n/**\n * Draws a sample of sums from a list of distributions.\n * @param {array} dists sequence of Pmf or Cdf objects\n * @param {number} n sample size\n * @returns new Pmf of sums\n */\nexport const sampleSum = (dists, n) => {\n  const list = new Array(n).fill(0).map(() => randomSum(dists));\n  const pmf = makePmfFromList(list);\n  return pmf;\n};\n\n/**\n * Computes the unnormalized PDF of the normal distribution.\n * @param {number} x value\n * @param {number} mu mean\n * @param {number} sigma standard deviation\n * @returns float probability density\n */\nexport const evalGaussianPdf = (x, mu, sigma) => normalPdf(x, mu, sigma);\n\n/**\n * Makes a PMF discrete approx to a Gaussian distribution.\n * @param {number} mu float mean\n * @param {number} sigma float standard deviation\n * @param {number} numSigmas how many sigmas to extend in each direction\n * @param {number} n number of values in the Pmf\n * @returns normalized Pmf\n */\nexport const makeGaussianPdf = (mu, sigma, numSigmas, n = 201) => {\n  const pmf = new Pmf();\n\n  // low = mu - numSigmas * sigma;\n  const low = math.sub(mu, math.mult(numSigmas, sigma));\n  // high = mu + numSigmas * sigma;\n  const high = math.add(mu, math.mult(numSigmas, sigma));\n\n  for (let x of linspace(low, high, n)) {\n    const p = evalGaussianPdf(x, mu, sigma);\n    pmf.set(x, p);\n  }\n  pmf.normalize();\n\n  return pmf;\n};\n\n/**\n * Evaluates the binomial pmf.\n * @returns the probabily of k successes in n trials with probability p.\n */\nexport const evalBinomialPmf = (k, n, p) => binomialPmf(k, n, p);\n\n/**\n * Computes the Poisson PMF.\n * @param {number} k number of events\n * @param {number} lam parameter lambda in events per unit time\n * @returns float probability\n */\nexport const evalPoissonPmf = (k, lam) => poissonPmf(k, lam);\n"],"file":"helpers.js"}