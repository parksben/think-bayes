{"version":3,"sources":["../../src/Pmf/index.js"],"names":["Pmf","x","probDefault","d","get","xs","map","prob","name","t","filter","val","reduce","prev","curr","math","add","fraction","logFlag","ValueError","total","factor","div","entries","p","set","mult","size","target","Math","random","RangeError","mu","miu","mean","variance","sub","maxProb","max","values","find","percentage","cdf","makeCdf","credibleInterval","other","addPmf","e","addConstant","pmf","items","v1","p1","v2","p2","incr","v","k","ps","c","DictWrapper"],"mappings":"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","sourcesContent":["/**\n * Represents a probability mass function.\n * Values can be any hashable type; probabilities are floating-point.\n * Pmfs are not necessarily normalized.\n */\n\nimport DictWrapper from '../DictWrapper';\nimport { ValueError } from '../utils';\nimport { makeCdfFromPmf } from '../convertors';\nimport math from '../math';\n\nexport default class Pmf extends DictWrapper {\n  /**\n   * Gets the probability associated with the value x.\n   * @param {any} x number value\n   * @param {number} probDefault value to return if the key is not there\n   */\n  prob(x, probDefault = 0) {\n    return this.d.get(x) || probDefault;\n  }\n\n  /**\n   * Gets probabilities for a sequence of values.\n   */\n  probs(xs) {\n    return xs.map(x => this.prob(x));\n  }\n\n  /**\n   * Makes a cdf.\n   */\n  makeCdf(name) {\n    return makeCdfFromPmf(this, name);\n  }\n\n  probGreater(x) {\n    const t = [...this.d]\n      .filter(([val, prob]) => val > x)\n      .map(([val, prob]) => prob);\n    return t.reduce((prev, curr) => math.add(prev, curr));\n  }\n\n  probLess(x) {\n    const t = [...this.d]\n      .filter(([val, prob]) => val < x)\n      .map(([val, prob]) => prob);\n    return t.reduce((prev, curr) => math.add(prev, curr));\n  }\n\n  /**\n   * Normalizes this PMF so the sum of all probs is fraction.\n   * @param {number} fraction what the total should be after normalization\n   * @returns the total probability before normalizing\n   */\n  normalize(fraction = 1.0) {\n    if (this.logFlag) throw new ValueError('pmf is under a log transform');\n\n    const total = this.total();\n    if (total === 0.0)\n      throw new ValueError('Normalize: total probability is zero.');\n\n    const factor = math.div(fraction, total);\n    for (let [x, p] of this.d.entries()) {\n      this.d.set(x, math.mult(p, factor));\n    }\n\n    return total;\n  }\n\n  /**\n   * Chooses a random element from this PMF.\n   * @returns float value from the Pmf\n   */\n  random() {\n    if (this.d.size === 0) throw new ValueError('pmf contains no values.');\n\n    const target = Math.random();\n    let total = 0;\n    for (let [x, p] of this.d.entries()) {\n      total = math.add(total, p);\n      if (total >= target) return x;\n    }\n\n    throw new RangeError(\n      `Value not found, no one value in this pmf matches the random target '${target}'`\n    );\n  }\n\n  /**\n   * Computes the mean of a PMF.\n   * @returns float mean\n   */\n  mean() {\n    let mu = 0;\n    for (let [x, p] of this.d.entries()) {\n      mu = math.add(mu, math.mult(p, x));\n    }\n    return mu;\n  }\n\n  /**\n   * Computes the variance of a PMF.\n   * @param {number} mu the point around which the variance is computed; if omitted, computes the mean\n   * @returns float variance\n   */\n  var(miu) {\n    const mu = miu || this.mean();\n    let variance = 0;\n    for (let [x, p] of this.d.entries()) {\n      // variance += p * (x - mu) ** 2\n      variance = math.add(variance, math.mult(p, math.sub(x, mu) ** 2));\n    }\n    return variance;\n  }\n\n  /**\n   * Returns the value with the highest probability.\n   * @returns float probability\n   */\n  maximumLikelihood() {\n    const maxProb = Math.max(...this.d.values());\n    const [val] = [...this.d].find(([x, p]) => p === maxProb);\n    return val;\n  }\n\n  /**\n   * Computes the central credible interval.\n   * If percentage=90, computes the 90% CI.\n   * @param {number} percentage float between 0 and 100\n   * @returns sequence of two floats, low and high\n   */\n  credibleInterval(percentage = 90) {\n    const cdf = this.makeCdf();\n    return cdf.credibleInterval(percentage);\n  }\n\n  /**\n   * Computes the Pmf of the sum of values drawn from self and other.\n   * @param {number or pmf} other another pmf or a number\n   * @returns new pmf\n   */\n  add(other) {\n    try {\n      return this.addPmf(other);\n    } catch (e) {\n      return this.addConstant(other);\n    }\n  }\n\n  /**\n   * Computes the Pmf of the sum of values drawn from self and other.\n   * @param {pmf} other another pmf\n   * @returns new Pmf\n   */\n  addPmf(other) {\n    const pmf = new Pmf();\n    for (let [v1, p1] of this.items()) {\n      for (let [v2, p2] of other.items()) {\n        pmf.incr(math.add(v1, v2), math.mult(p1, p2));\n      }\n    }\n    return pmf;\n  }\n\n  /**\n   * Computes the Pmf of the sum a constant and  values from self.\n   * @param {number} other a number\n   * @returns new Pmf\n   */\n  addConstant(other) {\n    const pmf = new Pmf();\n    for (let [v, p] of this.items()) {\n      pmf.set(math.add(v, other), p);\n    }\n    return pmf;\n  }\n\n  /**\n   * Computes the Pmf of the diff of values drawn from self and other.\n   * @param {pmf} other another Pmf\n   * @returns new Pmf\n   */\n  sub(other) {\n    const pmf = new Pmf();\n    for (let [v1, p1] of this.items()) {\n      for (let [v2, p2] of other.items()) {\n        pmf.incr(math.sub(v1, v2), math.mult(p1, p2));\n      }\n    }\n    return pmf;\n  }\n\n  /**\n   * Computes the CDF of the maximum of k selections from this dist.\n   * @param {number} k int\n   * @returns new Cdf\n   */\n  max(k) {\n    const cdf = this.makeCdf();\n    cdf.ps = cdf.ps.map(c => c ** k);\n    return cdf;\n  }\n}\n"],"file":"index.js"}