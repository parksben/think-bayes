{"version":3,"sources":["../src/utils.js"],"names":["ValueError","Error","UnimplementedMethodException","shallowClone","source","TypeError","targetObj","constructor","Array","key","hasOwnProperty","isNode","Function","logging","lib","tool","Object","defineProperties","print","value","log","writable","configurable","warning","text","process","emitWarning","warn","console","printTable","rows","header","minColWidth","frameH","frameV","colWidth","calColumnWidth","cn","Math","max","map","row","String","length","borderRow","fill","data","lines","r","line","c","n","td","join","printStr"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;IACaA,U;;;;;;;;;;;;mBAAmBC,K;AAEhC;;;;;;;;IAIaC,4B;;;;;;;;;;;;mBAAqCD,K,IAElD;;;;;AACO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM,EAAI;AACpC,MAAI,CAACA,MAAD,IAAW,QAAOA,MAAP,MAAkB,QAAjC,EACE,MAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AAEF,MAAMC,SAAS,GAAGF,MAAM,CAACG,WAAP,KAAuBC,KAAvB,GAA+B,EAA/B,GAAoC,EAAtD;;AACA,OAAK,IAAIC,GAAT,IAAgBL,MAAhB,EAAwB;AACtB,QAAIA,MAAM,CAACM,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC9BH,MAAAA,SAAS,CAACG,GAAD,CAAT,GAAiBL,MAAM,CAACK,GAAD,CAAvB;AACD;AACF;;AACD,SAAOH,SAAP;AACD,CAXM,C,CAaP;;;;AACO,IAAMK,MAAM,GAAG,IAAIC,QAAJ,+EAAf,C,CAQP;;;;AACO,IAAMC,OAAO,GAAI,UAAAC,GAAG,EAAI;AAC7B,MAAMC,IAAI,GAAGZ,YAAY,CAACW,GAAD,CAAzB;AACA,SAAOE,MAAM,CAACC,gBAAP,CAAwBF,IAAxB,EAA8B;AACnC;AACAG,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEJ,IAAI,CAACK,GADP;AAELC,MAAAA,QAAQ,EAAE,KAFL;AAGLC,MAAAA,YAAY,EAAE;AAHT,KAF4B;AAOnC;AACAC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,KAAK,EAAE,eAAAK,IAAI;AAAA,eACTb,MAAM,KAAKc,OAAO,CAACC,WAAR,CAAoBF,IAApB,CAAL,GAAiCT,IAAI,CAACY,IAAL,oBAAsBH,IAAtB,EAD9B;AAAA,OADJ;AAGPH,MAAAA,QAAQ,EAAE,KAHH;AAIPC,MAAAA,YAAY,EAAE;AAJP;AAR0B,GAA9B,CAAP;AAeD,CAjBsB,CAiBpBM,OAjBoB,CAAhB,C,CAmBP;;;;;AACO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAMpB;AAAA,uBALJC,IAKI;AAAA,MALJA,IAKI,0BALG,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,CAKH;AAAA,yBAJJC,MAII;AAAA,MAJJA,MAII,4BAJK,CAAC,OAAD,EAAU,MAAV,CAIL;AAAA,8BAHJC,WAGI;AAAA,MAHJA,WAGI,iCAHU,CAGV;AAAA,yBAFJC,MAEI;AAAA,MAFJA,MAEI,4BAFK,GAEL;AAAA,yBADJC,MACI;AAAA,MADJA,MACI,4BADK,GACL;AACJ,MAAMC,QAAQ,GAAG,EAAjB;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,EAAE,EAAI;AAC3B,QAAI,CAACF,QAAQ,CAACE,EAAD,CAAb,EAAmB;AACjBF,MAAAA,QAAQ,CAACE,EAAD,CAAR,GAAeC,IAAI,CAACC,GAAL,OAAAD,IAAI,qBACd,CAACP,MAAD,4BAAYD,IAAZ,GAAkBU,GAAlB,CAAsB,UAAAC,GAAG;AAAA,eAAIC,MAAM,CAACD,GAAG,CAACJ,EAAD,CAAJ,CAAN,CAAgBM,MAAhB,GAAyB,CAA7B;AAAA,OAAzB,CADc,UAEjBX,WAFiB,GAAnB;AAID;;AACD,WAAOG,QAAQ,CAACE,EAAD,CAAf;AACD,GARD;;AAUA,MAAMO,SAAS,GAAG,IAAIpC,KAAJ,CAAUuB,MAAM,CAACY,MAAjB,EAAyBE,IAAzB,CAA8B,SAA9B,CAAlB;AACA,MAAMC,IAAI,GAAGb,MAAM,IAAIF,MAAJ,EAAYa,SAAZ,4BAA0Bd,IAA1B,MAAmCC,MAAnC,4BAA8CD,IAA9C,EAAnB;AAEA,MAAMiB,KAAK,GAAGD,IAAI,CAACN,GAAL,CAAS,UAAAQ,CAAC,EAAI;AAC1B,QAAMC,IAAI,GAAGD,CAAC,CACXR,GADU,CACN,UAACU,CAAD,EAAIC,CAAJ,EAAU;AACb,UAAMC,EAAE,GACNF,CAAC,KAAK,SAAN,aACOhB,MADP,SACgB,IAAI1B,KAAJ,CAAU4B,cAAc,CAACe,CAAD,CAAxB,EAA6BN,IAA7B,CAAkCZ,MAAlC,EAA0CoB,IAA1C,CAA+C,EAA/C,CADhB,cAEOnB,MAFP,cAEiBgB,CAFjB,SAEqB,IAAI1C,KAAJ,CACf4B,cAAc,CAACe,CAAD,CAAd,GAAoBT,MAAM,CAACQ,CAAD,CAAN,CAAUP,MAA9B,GAAuC,CADxB,EAGdE,IAHc,CAGT,GAHS,EAIdQ,IAJc,CAIT,EAJS,CAFrB,CADF;AAQA,aAAOD,EAAP;AACD,KAXU,EAYVC,IAZU,CAYL,EAZK,CAAb;AAaA,qBAAUJ,IAAV,SAAiBf,MAAjB;AACD,GAfa,CAAd;AAiBA,MAAMoB,QAAQ,eAAQP,KAAK,CAACM,IAAN,CAAW,EAAX,CAAR,OAAd;AACAxC,EAAAA,OAAO,CAACK,KAAR,CAAcoC,QAAd;AACD,CAxCM","sourcesContent":["import math from './math';\n\n// ErrorType: ValueError\nexport class ValueError extends Error {}\n\n/**\n * ErrorType: UnimplementedMethodException\n * Exception if someone calls a method that should be overridden.\n */\nexport class UnimplementedMethodException extends Error {}\n\n// Create a new object by shallow copying another.\nexport const shallowClone = source => {\n  if (!source || typeof source !== 'object')\n    throw new TypeError('Invalid arguments value or type.');\n\n  const targetObj = source.constructor === Array ? [] : {};\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      targetObj[key] = source[key];\n    }\n  }\n  return targetObj;\n};\n\n// Detect if current environment is node.js\nexport const isNode = new Function(\n  `try {\n    return this === global;\n  } catch (e) {\n    return false;\n  }`\n);\n\n// logging utils\nexport const logging = (lib => {\n  const tool = shallowClone(lib);\n  return Object.defineProperties(tool, {\n    // print method likes `print` in python\n    print: {\n      value: tool.log,\n      writable: false,\n      configurable: false,\n    },\n    // warning method for different environment (node.js & browsers)\n    warning: {\n      value: text =>\n        isNode() ? process.emitWarning(text) : tool.warn(`warning: ${text}`),\n      writable: false,\n      configurable: false,\n    },\n  });\n})(console);\n\n// Print data set as a table\nexport const printTable = ({\n  rows = [['-', '-']],\n  header = ['Value', 'Prob'],\n  minColWidth = 5,\n  frameH = '-',\n  frameV = '|',\n}) => {\n  const colWidth = {};\n  const calColumnWidth = cn => {\n    if (!colWidth[cn]) {\n      colWidth[cn] = Math.max(\n        ...[header, ...rows].map(row => String(row[cn]).length + 2),\n        minColWidth\n      );\n    }\n    return colWidth[cn];\n  };\n\n  const borderRow = new Array(header.length).fill('borderX');\n  const data = frameH ? [header, borderRow, ...rows] : [header, ...rows];\n\n  const lines = data.map(r => {\n    const line = r\n      .map((c, n) => {\n        const td =\n          c === 'borderX'\n            ? `${frameV}${new Array(calColumnWidth(n)).fill(frameH).join('')}`\n            : `${frameV} ${c}${new Array(\n                calColumnWidth(n) - String(c).length - 1\n              )\n                .fill(' ')\n                .join('')}`;\n        return td;\n      })\n      .join('');\n    return `${line}${frameV}\\n`;\n  });\n\n  const printStr = `\\n${lines.join('')}\\n`;\n  logging.print(printStr);\n};\n"],"file":"utils.js"}