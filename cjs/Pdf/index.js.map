{"version":3,"sources":["../../esm/Pdf/index.js"],"names":["Pdf","x","UnimplementedMethodException","xs","name","pmf","Pmf","set","density","normalize"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;IAGqBA,G;;;;;;;;;;AACnB;;;;;;4BAMQC,C,EAAG;AACT,YAAM,IAAIC,mCAAJ,EAAN;AACD;AAED;;;;;;;;4BAKQC,E,EAAIC,I,EAAM;AAChB,UAAMC,GAAG,GAAG,IAAIC,YAAJ,CAAQ,IAAR,EAAcF,IAAd,CAAZ;AADgB;AAAA;AAAA;;AAAA;AAEhB,6BAAcD,EAAd,8HAAkB;AAAA,cAATF,CAAS;AAChBI,UAAAA,GAAG,CAACE,GAAJ,CAAQN,CAAR,EAAW,KAAKO,OAAL,CAAaP,CAAb,CAAX;AACD;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhBI,MAAAA,GAAG,CAACI,SAAJ;AACA,aAAOJ,GAAP;AACD","sourcesContent":["import { UnimplementedMethodException } from '../utils';\nimport Pmf from '../Pmf';\n\n/**\n * Represents a probability density function (PDF).\n */\nexport default class Pdf {\n  /**\n   * Evaluates this pdf at x.\n   * This method needs implement by children class, if not there is an `UnimplementedMethodException` would be throw when the method is called\n   * @param {number} x number\n   * @returns float probability density\n   */\n  density(x) {\n    throw new UnimplementedMethodException();\n  }\n\n  /**\n   * Makes a discrete version of this pdf, evaluated at xs.\n   * @param {string|array|object} xs equally-spaced sequence of values\n   * @returns new pmf\n   */\n  makePmf(xs, name) {\n    const pmf = new Pmf(null, name);\n    for (let x of xs) {\n      pmf.set(x, this.density(x));\n    }\n    pmf.normalize();\n    return pmf;\n  }\n}\n"],"file":"index.js"}