{"version":3,"sources":["../../esm/Hist/index.js"],"names":["Hist","x","d","get","xs","map","freq","other","items","val","incr","DictWrapper"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;IAMqBA,I;;;;;;;;;;;;;;AACnB;;;;;yBAKKC,C,EAAG;AACN,aAAO,KAAKC,CAAL,CAAOC,GAAP,CAAWF,CAAX,KAAiB,CAAxB;AACD;AAED;;;;;;0BAGMG,E,EAAI;AAAA;;AACR,aAAOA,EAAE,CAACC,GAAH,CAAO,UAAAJ,CAAC;AAAA,eAAI,KAAI,CAACK,IAAL,CAAUL,CAAV,CAAJ;AAAA,OAAR,CAAP;AACD;AAED;;;;;;;6BAISM,K,EAAO;AAAA;AAAA;AAAA;;AAAA;AACd,6BAAwB,KAAKC,KAAL,EAAxB,8HAAsC;AAAA;AAAA,cAA5BC,GAA4B;AAAA,cAAvBH,IAAuB;;AACpC,cAAIA,IAAI,GAAGC,KAAK,CAACD,IAAN,CAAWG,GAAX,CAAX,EAA4B,OAAO,KAAP;AAC7B;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAId,aAAO,IAAP;AACD;AAED;;;;;;6BAGSF,K,EAAO;AAAA;AAAA;AAAA;;AAAA;AACd,8BAAwBA,KAAK,CAACC,KAAN,EAAxB,mIAAuC;AAAA;AAAA,cAA7BC,GAA6B;AAAA,cAAxBH,IAAwB;;AACrC,eAAKI,IAAL,CAAUD,GAAV,EAAeH,IAAf;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIf;;;;EAnC+BK,qB","sourcesContent":["import DictWrapper from '../DictWrapper';\n\n/**\n * Represents a histogram, which is a map from values to frequencies.\n * Values can be any hashable type; frequencies are integer counters.\n * @param {string|array|object} values sequence of values\n * @param {string} name sequence of values\n */\nexport default class Hist extends DictWrapper {\n  /**\n   * Gets the frequency associated with the value x.\n   * @param {any} x number value\n   * @returns int frequency\n   */\n  freq(x) {\n    return this.d.get(x) || 0;\n  }\n\n  /**\n   * Gets frequencies for a sequence of values.\n   */\n  freqs(xs) {\n    return xs.map(x => this.freq(x));\n  }\n\n  /**\n   * Checks whether the values in this histogram are a subset of\n   * the values in the given histogram.\n   */\n  isSubset(other) {\n    for (let [val, freq] of this.items()) {\n      if (freq > other.freq(val)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Subtracts the values in the given histogram from this histogram.\n   */\n  subtract(other) {\n    for (let [val, freq] of other.items()) {\n      this.incr(val, freq);\n    }\n  }\n}\n"],"file":"index.js"}