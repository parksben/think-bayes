{"version":3,"sources":["../../esm/algorithm/num.js"],"names":["linspace","start","stop","num","endPoint","retStep","step","math","div","sub","arr","i","length","add","push"],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;AAUO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CACtBC,KADsB,EAEtBC,IAFsB,EAMnB;AAAA,MAHHC,GAGG,uEAHG,EAGH;AAAA,MAFHC,QAEG,uEAFQ,IAER;AAAA,MADHC,OACG,uEADO,KACP;;AACH;AACA,MAAMC,IAAI,GAAGC,cAAKC,GAAL,CACXD,cAAKE,GAAL,CAASP,IAAT,EAAeD,KAAf,CADW,EAEXG,QAAQ,GAAGG,cAAKE,GAAL,CAASN,GAAT,EAAc,CAAd,CAAH,GAAsBA,GAFnB,CAAb;;AAIA,MAAMO,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAGV,KAAb,EAAoBU,CAAC,IAAIT,IAAL,IAAaQ,GAAG,CAACE,MAAJ,GAAaT,GAA9C,EAAmDQ,CAAC,GAAGJ,cAAKM,GAAL,CAASF,CAAT,EAAYL,IAAZ,CAAvD,EAA0E;AACxEI,IAAAA,GAAG,CAACI,IAAJ,CAASH,CAAT;AACD;;AACD,SAAON,OAAO,GAAG,CAACK,GAAD,EAAMJ,IAAN,CAAH,GAAiBI,GAA/B;AACD,CAjBM","sourcesContent":["import math from '../math';\n\n/**\n * Return evenly spaced numbers over a specified interval.\n * Returns num evenly spaced samples, calculated over the interval [start, stop].\n * The endpoint of the interval can optionally be excluded.\n * @param {number} start The starting value of the sequence.\n * @param {number} stop The end value of the sequence.\n * @param {number} num Number of samples to generate.\n * @param {boolean} endPoint If true, stop is the last sample. Otherwise, it is not included.\n * @param {boolean} retStep If true, return [samples, step], where step is the spacing between samples.\n */\nexport const linspace = (\n  start,\n  stop,\n  num = 50,\n  endPoint = true,\n  retStep = false\n) => {\n  // step = (stop - start) / (endPoint ? num - 1 : num)\n  const step = math.div(\n    math.sub(stop, start),\n    endPoint ? math.sub(num, 1) : num\n  );\n  const arr = [];\n  for (let i = start; i <= stop && arr.length < num; i = math.add(i, step)) {\n    arr.push(i);\n  }\n  return retStep ? [arr, step] : arr;\n};\n"],"file":"num.js"}