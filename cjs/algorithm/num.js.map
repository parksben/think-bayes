{"version":3,"sources":["../../esm/algorithm/num.js"],"names":["linspace","start","stop","num","endPoint","retStep","step","math","div","sub","arr","i","length","add","push","range","args"],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;AAUO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CACtBC,KADsB,EAEtBC,IAFsB,EAMnB;AAAA,MAHHC,GAGG,uEAHG,EAGH;AAAA,MAFHC,QAEG,uEAFQ,IAER;AAAA,MADHC,OACG,uEADO,KACP;;AACH;AACA,MAAMC,IAAI,GAAGC,cAAKC,GAAL,CACXD,cAAKE,GAAL,CAASP,IAAT,EAAeD,KAAf,CADW,EAEXG,QAAQ,GAAGG,cAAKE,GAAL,CAASN,GAAT,EAAc,CAAd,CAAH,GAAsBA,GAFnB,CAAb;;AAIA,MAAMO,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAGV,KAAb,EAAoBU,CAAC,IAAIT,IAAL,IAAaQ,GAAG,CAACE,MAAJ,GAAaT,GAA9C,EAAmDQ,CAAC,GAAGJ,cAAKM,GAAL,CAASF,CAAT,EAAYL,IAAZ,CAAvD,EAA0E;AACxEI,IAAAA,GAAG,CAACI,IAAJ,CAASH,CAAT;AACD;;AACD,SAAON,OAAO,GAAG,CAACK,GAAD,EAAMJ,IAAN,CAAH,GAAiBI,GAA/B;AACD,CAjBM;AAmBP;;;;;;;;;;AAMO,IAAMK,KAAK,GAAG,SAARA,KAAQ,GAAa;AAChC,MAAML,GAAG,GAAG,EAAZ;AADgC,MAE3BT,KAF2B,GAEL,CAFK;AAAA,MAEpBC,IAFoB,GAEF,CAFE;AAAA,MAEdI,IAFc,GAEC,CAFD;;AAAA,oCAATU,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAIhC,MAAIA,IAAI,CAACJ,MAAL,KAAgB,CAApB,EAAuB;AACpBV,IAAAA,IADoB,GACZc,IADY;AAEtB;;AACD,MAAIA,IAAI,CAACJ,MAAL,KAAgB,CAApB,EAAuB;AACpBX,IAAAA,KADoB,GACLe,IADK;AACbd,IAAAA,IADa,GACLc,IADK;AAEtB;;AACD,MAAIA,IAAI,CAACJ,MAAL,KAAgB,CAApB,EAAuB;AACpBX,IAAAA,KADoB,GACCe,IADD;AACbd,IAAAA,IADa,GACCc,IADD;AACPV,IAAAA,IADO,GACCU,IADD;AAEtB;;AAED,MAAId,IAAI,GAAGD,KAAP,IAAgBK,IAAI,GAAG,CAA3B,EAA8B;AAC5B,SAAK,IAAIK,CAAC,GAAGV,KAAb,EAAoBU,CAAC,GAAGT,IAAxB,EAA8BS,CAAC,IAAIL,IAAnC,EAAyC;AACvCI,MAAAA,GAAG,CAACI,IAAJ,CAASH,CAAT;AACD;AACF,GAJD,MAIO;AACL,SAAK,IAAIA,EAAC,GAAGV,KAAb,EAAoBU,EAAC,GAAGT,IAAxB,EAA8BS,EAAC,IAAIL,IAAnC,EAAyC;AACvCI,MAAAA,GAAG,CAACI,IAAJ,CAASH,EAAT;AACD;AACF;;AAED,SAAOD,GAAP;AACD,CAzBM","sourcesContent":["import math from '../math';\n\n/**\n * Return evenly spaced numbers over a specified interval.\n * Returns num evenly spaced samples, calculated over the interval [start, stop].\n * The endpoint of the interval can optionally be excluded.\n * @param {number} start The starting value of the sequence.\n * @param {number} stop The end value of the sequence.\n * @param {number} num Number of samples to generate.\n * @param {boolean} endPoint If true, stop is the last sample. Otherwise, it is not included.\n * @param {boolean} retStep If true, return [samples, step], where step is the spacing between samples.\n */\nexport const linspace = (\n  start,\n  stop,\n  num = 50,\n  endPoint = true,\n  retStep = false\n) => {\n  // step = (stop - start) / (endPoint ? num - 1 : num)\n  const step = math.div(\n    math.sub(stop, start),\n    endPoint ? math.sub(num, 1) : num\n  );\n  const arr = [];\n  for (let i = start; i <= stop && arr.length < num; i = math.add(i, step)) {\n    arr.push(i);\n  }\n  return retStep ? [arr, step] : arr;\n};\n\n/**\n * Return an sequence of numbers and is commonly used for looping a specific number of times in for loops.\n * @param {number} start The value of the start parameter (or 0 if the parameter was not supplied)\n * @param {number} stop The value of the stop parameter\n * @param {number} step The value of the step parameter (or 1 if the parameter was not supplied)\n */\nexport const range = (...args) => {\n  const arr = [];\n  let [start, stop, step] = [0, 0, 1];\n\n  if (args.length === 1) {\n    [stop] = args;\n  }\n  if (args.length === 2) {\n    [start, stop] = args;\n  }\n  if (args.length === 3) {\n    [start, stop, step] = args;\n  }\n\n  if (stop < start && step < 0) {\n    for (let i = start; i > stop; i += step) {\n      arr.push(i);\n    }\n  } else {\n    for (let i = start; i < stop; i += step) {\n      arr.push(i);\n    }\n  }\n\n  return arr;\n};\n"],"file":"num.js"}