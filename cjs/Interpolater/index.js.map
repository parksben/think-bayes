{"version":3,"sources":["../../esm/Interpolater/index.js"],"names":["Interpolater","xs","ys","x","_bisect","math","sub","length","i","frac","div","y","add","mult"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;;;;IAKqBA,Y;;;AACnB,8BAAkC;AAAA,uBAApBC,EAAoB;AAAA,QAApBA,EAAoB,wBAAf,EAAe;AAAA,uBAAXC,EAAW;AAAA,QAAXA,EAAW,wBAAN,EAAM;;AAAA;;AAChC,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;AAED;;;;;;;2BAGOC,C,EAAG;AACR,aAAO,KAAKC,OAAL,CAAaD,CAAb,EAAgB,KAAKF,EAArB,EAAyB,KAAKC,EAA9B,CAAP;AACD;AAED;;;;;;4BAGQC,C,EAAG;AACT,aAAO,KAAKC,OAAL,CAAaD,CAAb,EAAgB,KAAKD,EAArB,EAAyB,KAAKD,EAA9B,CAAP;AACD;AAED;;;;;;4BAGQE,C,EAAGF,E,EAAIC,E,EAAI;AACjB,UAAIC,CAAC,IAAIF,EAAE,CAAC,CAAD,CAAX,EAAgB,OAAOC,EAAE,CAAC,CAAD,CAAT;AAChB,UAAIC,CAAC,IAAIF,EAAE,CAACI,cAAKC,GAAL,CAASL,EAAE,CAACM,MAAZ,EAAoB,CAApB,CAAD,CAAX,EAAqC,OAAOL,EAAE,CAACG,cAAKC,GAAL,CAASJ,EAAE,CAACK,MAAZ,EAAoB,CAApB,CAAD,CAAT;AAErC,UAAMC,CAAC,GAAG,qBAAOP,EAAP,EAAWE,CAAX,CAAV,CAJiB,CAMjB;;AACA,UAAMM,IAAI,GAAGJ,cAAKK,GAAL,CACX,MAAML,cAAKC,GAAL,CAASH,CAAT,EAAYF,EAAE,CAACI,cAAKC,GAAL,CAASE,CAAT,EAAY,CAAZ,CAAD,CAAd,CADK,EAEXH,cAAKC,GAAL,CAASL,EAAE,CAACO,CAAD,CAAX,EAAgBP,EAAE,CAACI,cAAKC,GAAL,CAASE,CAAT,EAAY,CAAZ,CAAD,CAAlB,CAFW,CAAb,CAPiB,CAYjB;;;AACA,UAAMG,CAAC,GAAGN,cAAKO,GAAL,CACRV,EAAE,CAACG,cAAKC,GAAL,CAASE,CAAT,EAAY,CAAZ,CAAD,CADM,EAERH,cAAKQ,IAAL,CAAUR,cAAKQ,IAAL,CAAUJ,IAAV,EAAgB,GAAhB,CAAV,EAAgCJ,cAAKC,GAAL,CAASJ,EAAE,CAACM,CAAD,CAAX,EAAgBN,EAAE,CAACG,cAAKC,GAAL,CAASE,CAAT,EAAY,CAAZ,CAAD,CAAlB,CAAhC,CAFQ,CAAV;;AAKA,aAAOG,CAAP;AACD","sourcesContent":["import { bisect } from '../algorithm/bisect';\nimport math from '../math';\n\n/**\n * Represents a mapping between sorted sequences; performs linear interp.\n * @param {array} xs sorted list\n * @param {array} ys sorted list\n */\nexport default class Interpolater {\n  constructor({ xs = [], ys = [] }) {\n    this.xs = xs;\n    this.ys = ys;\n  }\n\n  /**\n   * Looks up x and returns the corresponding value of y.\n   */\n  lookup(x) {\n    return this._bisect(x, this.xs, this.ys);\n  }\n\n  /**\n   * Looks up y and returns the corresponding value of x.\n   */\n  reverse(x) {\n    return this._bisect(x, this.ys, this.xs);\n  }\n\n  /**\n   * Helper function.\n   */\n  _bisect(x, xs, ys) {\n    if (x <= xs[0]) return ys[0];\n    if (x >= xs[math.sub(xs.length, 1)]) return ys[math.sub(ys.length, 1)];\n\n    const i = bisect(xs, x);\n\n    // frac = (1.0 * (x - xs[i - 1])) / (xs[i] - xs[i - 1])\n    const frac = math.div(\n      1.0 * math.sub(x, xs[math.sub(i, 1)]),\n      math.sub(xs[i], xs[math.sub(i, 1)])\n    );\n\n    // y = ys[i - 1] + frac * 1.0 * (ys[i] - ys[i - 1])\n    const y = math.add(\n      ys[math.sub(i, 1)],\n      math.mult(math.mult(frac, 1.0), math.sub(ys[i], ys[math.sub(i, 1)]))\n    );\n\n    return y;\n  }\n}\n"],"file":"index.js"}