{"version":3,"sources":["../esm/convertors.js"],"names":["makeJoint","pmf1","pmf2","joint","Joint","items","v1","p1","v2","p2","set","makeHistFromList","t","name","hist","Hist","x","incr","makeHistFromDict","d","makePmfFromList","getDict","pmf","Pmf","normalize","makePmfFromDict","makePmfFromItems","Map","makePmfFromHist","makePmfFromCdf","cdf","prev","val","prob","math","sub","makeMixture","metapmf","mix","makeUniformPmf","low","high","n","makeCdfFromItems","runSum","xs","cs","sortedItems","sort","a","b","count","add","push","value","ps","map","c","Cdf","makeCdfFromDict","makeCdfFromHist","makeCdfFromList","seq","makeCdfFromPmf","makeSuiteFromDict","suite","Suite","setDict","makeSuiteFromList","makeSuiteFromHist","makeSuiteFromCdf"],"mappings":"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","sourcesContent":["import Cdf from './Cdf';\nimport Pmf from './Pmf';\nimport Joint from './Joint';\nimport Hist from './Hist';\nimport Suite from './Suite';\nimport { linspace } from './algorithm/num';\nimport math from './math';\n\n/**\n * Joint distribution of values from pmf1 and pmf2.\n * @param {pmf} pmf1 Pmf object\n * @param {pmf} pmf2 Pmf object\n * @returns Joint pmf of value pairs\n */\nexport const makeJoint = (pmf1, pmf2) => {\n  const joint = new Joint();\n  for (let [v1, p1] of pmf1.items()) {\n    for (let [v2, p2] of pmf2.items()) {\n      joint.set([v1, v2], p1 * p2);\n    }\n  }\n  return joint;\n};\n\n/**\n * Makes a histogram from an unsorted sequence of values.\n * @param {array} t sequence of numbers\n * @param {string} name string name for this histogram\n * @returns Hist object\n */\nexport const makeHistFromList = (t, name) => {\n  const hist = new Hist(null, name);\n  for (let x of t) {\n    hist.incr(x);\n  }\n  return hist;\n};\n\n/**\n * Makes a histogram from a map from values to frequencies.\n * @param {object/map} d dictionary that maps values to frequencies\n * @param {string} name string name for this histogram\n * @returns Hist object\n */\nexport const makeHistFromDict = (d, name) => {\n  return new Hist(d, name);\n};\n\n/**\n * Makes a PMF from an unsorted sequence of values.\n * @param {array} t sequence of numbers\n * @param {string} name string name for this PMF\n * @returns Pmf object\n */\nexport const makePmfFromList = (t, name) => {\n  const hist = makeHistFromList(t);\n  const d = hist.getDict();\n  const pmf = new Pmf(d, name);\n  pmf.normalize();\n  return pmf;\n};\n\n/**\n * Makes a PMF from a map from values to probabilities.\n * @param {object/map} d dictionary that maps values to probabilities\n * @param {string} name string name for this PMF\n * * @returns Pmf object\n */\nexport const makePmfFromDict = (d, name) => {\n  const pmf = new Pmf(d, name);\n  pmf.normalize();\n  return pmf;\n};\n\n/**\n * Makes a PMF from a sequence of value-probability pairs\n * @param {array} t sequence of value-probability pairs\n * @param {string} name string name for this PMF\n * * @returns Pmf object\n */\nexport const makePmfFromItems = (t, name) => {\n  const pmf = new Pmf(new Map(t), name);\n  pmf.normalize();\n  return pmf;\n};\n\n/**\n * Makes a normalized PMF from a Hist object.\n * @param {hist} hist Hist object\n * @param {string} name string name\n * @returns Pmf object\n */\nexport const makePmfFromHist = (hist, name) => {\n  // make a copy of the dictionary\n  const d = new Map(hist.getDict());\n  const pmf = Pmf(d, name || hist.name);\n  pmf.normalize();\n  return pmf;\n};\n\n/**\n * Makes a normalized Pmf from a Cdf object.\n * @param {cdf} cdf Cdf object\n * @param {string} name string name for the new Pmf\n * @returns Pmf object\n */\nexport const makePmfFromCdf = (cdf, name) => {\n  const pmf = new Pmf(null, name || cdf.name);\n  let prev = 0;\n  for (let [val, prob] of cdf.items()) {\n    pmf.incr(val, math.sub(prob, prev));\n    prev = prob;\n  }\n  return pmf;\n};\n\n/**\n * Make a mixture distribution.\n * @param {pmf} metapmf Pmf that maps from Pmfs to probs.\n * @param {string} name string name for the new Pmf\n * @returns Pmf object\n */\nexport const makeMixture = (metapmf, name = 'mix') => {\n  const mix = new Pmf(null, name);\n  for (let [pmf, p1] of metapmf.items()) {\n    for (let [x, p2] of pmf.items()) {\n      mix.incr(x, p1 * p2);\n    }\n  }\n  return mix;\n};\n\n/**\n * Make a uniform Pmf.\n * @param {number} low lowest value (inclusive)\n * @param {number} high highest value (inclusize)\n * @param {number} n number of values\n */\nexport const makeUniformPmf = (low, high, n) => {\n  const pmf = new Pmf();\n  for (let x of linspace(low, high, n)) {\n    pmf.set(x, 1);\n  }\n  pmf.normalize();\n  return pmf;\n};\n\n/**\n * Makes a cdf from an unsorted sequence of (value, frequency) pairs.\n * @param {array} items unsorted sequence of (value, frequency) pairs\n * @param {string} name string name for this CDF\n * @returns cdf: list of (value, fraction) pairs\n */\nexport const makeCdfFromItems = (items, name = '') => {\n  let runSum = 0;\n  const xs = [];\n  const cs = [];\n  const sortedItems = items.sort(([a], [b]) => math.sub(a, b));\n\n  for (let [val, count] of sortedItems) {\n    runSum = math.add(runSum, count);\n    xs.push(value);\n    cs.push(runSum);\n  }\n\n  const ps = cs.map(c => c / runSum);\n  const cdf = new Cdf(xs, ps, name);\n\n  return cdf;\n};\n\n/**\n * Makes a CDF from a dictionary that maps values to frequencies.\n * @param {object/mapt} d dictionary that maps values to frequencies.\n * @param {string} name string name for the data.\n * @returns Cdf object\n */\nexport const makeCdfFromDict = (d, name) => makeCdfFromItems(d.items(), name);\n\n/**\n * Makes a CDF from a Hist object.\n * @param {hist} hist Hist object\n * @param {string} name string name for the data.\n * @returns Cdf object\n */\nexport const makeCdfFromHist = (hist, name) =>\n  makeCdfFromItems(hist.items(), name);\n\n/**\n * Creates a CDF from an unsorted sequence.\n * @param {array} seq unsorted sequence of sortable values\n * @param {string} name string name for the cdf\n * @returns Cdf object\n */\nexport const makeCdfFromList = (seq, name) => {\n  const hist = makeHistFromList(seq);\n  return makeCdfFromHist(hist, name);\n};\n\n/**\n * Makes a CDF from a Pmf object.\n * @param {pmf} pmf Pmf object\n * @param {string} name string name for the data.\n * @returns Cdf object\n */\nexport const makeCdfFromPmf = (pmf, name) =>\n  makeCdfFromItems(pmf.items(), name || pmf.name);\n\n/**\n * Makes a suite from a map from values to probabilities.\n * @param {object/map} d dictionary that maps values to probabilities\n * @param {string} name string name for this suite\n * @returns Suite object\n */\nexport const makeSuiteFromDict = (d, name) => {\n  const suite = new Suite(null, name);\n  suite.setDict(d);\n  suite.normalize();\n  return suite;\n};\n\n/**\n * Makes a suite from an unsorted sequence of values.\n * @param {array} t sequence of numbers\n * @param {string} name string name for this suite\n */\nexport const makeSuiteFromList = (t, name) => {\n  const hist = makeHistFromList(t);\n  const d = hist.getDict();\n  return makeSuiteFromDict(d, name);\n};\n\n/**\n * Makes a normalized suite from a Hist object.\n * @param {hist} hist Hist object\n * @param {string} name string name\n */\nexport const makeSuiteFromHist = (hist, name) => {\n  const d = new Map(hist.getDict());\n  return makeSuiteFromDict(d, name || hist.name);\n};\n\n/**\n * Makes a normalized Suite from a Cdf object.\n * @param {cdf} cdf Cdf object\n * @param {string} name string name for the new Suite\n * @returns Suite object\n */\nexport const makeSuiteFromCdf = (cdf, name) => {\n  const suite = new Suite(null, name || cdf.name);\n\n  let prev = 0;\n  for (let [val, prob] of cdf.items()) {\n    suite.incr(val, math.sub(prob, prev));\n    prev = prob;\n  }\n\n  return suite;\n};\n"],"file":"convertors.js"}