{"version":3,"sources":["../../esm/Joint/index.js"],"names":["Joint","i","name","pmf","Pmf","items","vs","prob","incr","j","val","normalize","percentage","interval","total","t","map","x","p","sort","a","b","math","compare","push","add","div"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,K;;;;;;;;;;;;;;AACnB;;;;;6BAKSC,C,EAAGC,I,EAAM;AAChB,UAAMC,GAAG,GAAG,IAAIC,aAAJ,CAAQ,IAAR,EAAcF,IAAd,CAAZ;AADgB;AAAA;AAAA;;AAAA;AAEhB,6BAAuB,KAAKG,KAAL,EAAvB,8HAAqC;AAAA;AAAA,cAA3BC,EAA2B;AAAA,cAAvBC,IAAuB;;AACnCJ,UAAAA,GAAG,CAACK,IAAJ,CAASF,EAAE,CAACL,CAAD,CAAX,EAAgBM,IAAhB;AACD;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhB,aAAOJ,GAAP;AACD;AAED;;;;;;;;;;;gCAQYF,C,EAAGQ,C,EAAGC,G,EAAKR,I,EAAM;AAC3B,UAAMC,GAAG,GAAG,IAAIC,aAAJ,CAAQ,IAAR,EAAcF,IAAd,CAAZ;AAD2B;AAAA;AAAA;;AAAA;AAE3B,8BAAuB,KAAKG,KAAL,EAAvB,mIAAqC;AAAA;AAAA,cAA3BC,EAA2B;AAAA,cAAvBC,IAAuB;;AACnC,cAAID,EAAE,CAACG,CAAD,CAAF,KAAUC,GAAd,EAAmB;AACnBP,UAAAA,GAAG,CAACK,IAAJ,CAASF,EAAE,CAACL,CAAD,CAAX,EAAgBM,IAAhB;AACD;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM3BJ,MAAAA,GAAG,CAACQ,SAAJ;AACA,aAAOR,GAAP;AACD;AAED;;;;;;;;;;sCAOiC;AAAA,UAAjBS,UAAiB,uEAAJ,EAAI;AAC/B,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAMC,CAAC,GAAG,KAAKV,KAAL,GACPW,GADO,CACH;AAAA;AAAA,YAAEC,CAAF;AAAA,YAAKC,CAAL;;AAAA,eAAY,CAACA,CAAD,EAAID,CAAJ,CAAZ;AAAA,OADG,EAEPE,IAFO,CAEF;AAAA;AAAA,YAAEC,CAAF;;AAAA;AAAA,YAAOC,CAAP;;AAAA,eAAcC,cAAKC,OAAL,CAAaF,CAAb,EAAgBD,CAAhB,CAAd;AAAA,OAFE,CAAV;AAH+B;AAAA;AAAA;;AAAA;AAO/B,8BAAwBL,CAAxB,mIAA2B;AAAA;AAAA,cAAjBR,IAAiB;AAAA,cAAXG,GAAW;;AACzBG,UAAAA,QAAQ,CAACW,IAAT,CAAcd,GAAd;AACAI,UAAAA,KAAK,GAAGQ,cAAKG,GAAL,CAASX,KAAT,EAAgBP,IAAhB,CAAR;AACA,cAAIO,KAAK,IAAIQ,cAAKI,GAAL,CAASd,UAAT,EAAqB,GAArB,CAAb,EAAwC;AACzC;AAX8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAa/B,aAAOC,QAAP;AACD;;;;EArDgCT,a","sourcesContent":["/**\n * Represents a joint distribution.\n * The values are sequences (usually tuples)\n */\n\nimport Pmf from '../Pmf';\nimport math from '../math';\n\nexport default class Joint extends Pmf {\n  /**\n   * Gets the marginal distribution of the indicated variable.\n   * @param {number} i index of the variable we want\n   * @returns Pmf\n   */\n  marginal(i, name) {\n    const pmf = new Pmf(null, name);\n    for (let [vs, prob] of this.items()) {\n      pmf.incr(vs[i], prob);\n    }\n    return pmf;\n  }\n\n  /**\n   * Gets the conditional distribution of the indicated variable.\n   * Distribution of vs[i], conditioned on vs[j] = val.\n   * @param {number} i index of the variable we want\n   * @param {number} j which variable is conditioned on\n   * @param {*} val the value the jth variable has to have\n   * @returns Pmf\n   */\n  conditional(i, j, val, name) {\n    const pmf = new Pmf(null, name);\n    for (let [vs, prob] of this.items()) {\n      if (vs[j] !== val) continue;\n      pmf.incr(vs[i], prob);\n    }\n    pmf.normalize();\n    return pmf;\n  }\n\n  /**\n   * Returns the maximum-likelihood credible interval.\n   * If percentage=90, computes a 90% CI containing the values\n   * with the highest likelihoods.\n   * @param {number} percentage float between 0 and 100\n   * @returns list of values from the suite\n   */\n  maxLikeInterval(percentage = 90) {\n    const interval = [];\n    let total = 0;\n    const t = this.items()\n      .map(([x, p]) => [p, x])\n      .sort(([a], [b]) => math.compare(b, a));\n\n    for (let [prob, val] of t) {\n      interval.push(val);\n      total = math.add(total, prob);\n      if (total >= math.div(percentage, 100)) break;\n    }\n\n    return interval;\n  }\n}\n"],"file":"index.js"}