{"version":3,"sources":["../../esm/Suite/index.js"],"names":["Suite","data","values","hypo","like","likelihood","mult","normalize","logLikelihood","incr","dataset","logUpdate","UnimplementedMethodException","items","prob","set","remove","odds","Pmf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,K;;;;;;;;;;;;;;AACnB;;;;;2BAKOC,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACX,6BAAiB,KAAKC,MAAL,EAAjB,8HAAgC;AAAA,cAAvBC,IAAuB;AAC9B,cAAMC,IAAI,GAAG,KAAKC,UAAL,CAAgBJ,IAAhB,EAAsBE,IAAtB,CAAb;AACA,eAAKG,IAAL,CAAUH,IAAV,EAAgBC,IAAhB;AACD;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKX,aAAO,KAAKG,SAAL,EAAP;AACD;AAED;;;;;;;;;8BAMUN,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACd,8BAAiB,KAAKC,MAAL,EAAjB,mIAAgC;AAAA,cAAvBC,IAAuB;AAC9B,cAAMC,IAAI,GAAG,KAAKI,aAAL,CAAmBP,IAAnB,EAAyBE,IAAzB,CAAb;AACA,eAAKM,IAAL,CAAUN,IAAV,EAAgBC,IAAhB;AACD;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKf;AAED;;;;;;;;;;;8BAQUM,O,EAAS;AACjB,iDAAqBA,OAArB,2BAA+B;AAA1B,YAAIT,IAAI,WAAR;AAA0B;AAAA;AAAA;;AAAA;AAC7B,gCAAiB,KAAKC,MAAL,EAAjB,mIAAgC;AAAA,gBAAvBC,IAAuB;AAC9B,gBAAMC,IAAI,GAAG,KAAKC,UAAL,CAAgBJ,IAAhB,EAAsBE,IAAtB,CAAb;AACA,iBAAKG,IAAL,CAAUH,IAAV,EAAgBC,IAAhB;AACD;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK9B;;AACD,aAAO,KAAKG,SAAL,EAAP;AACD;AAED;;;;;;;;iCAKaG,O,EAAS;AAAA;AAAA;AAAA;;AAAA;AACpB,8BAAiBA,OAAjB,mIAA0B;AAAA,cAAjBT,IAAiB;AACxB,eAAKU,SAAL,CAAeV,IAAf;AACD;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrB;AAED;;;;;;;;;;;+BAQWA,I,EAAME,I,EAAM;AACrB,YAAM,IAAIS,mCAAJ,EAAN;AACD;AAED;;;;;;;;;;;kCAQcX,I,EAAME,I,EAAM;AACxB,YAAM,IAAIS,mCAAJ,EAAN;AACD;AAED;;;;;;;+BAIW;AAAA;AAAA;AAAA;;AAAA;AACT,8BAAyB,KAAKC,KAAL,EAAzB,mIAAuC;AAAA;AAAA,cAA7BV,IAA6B;AAAA,cAAvBW,IAAuB;;AACrC,cAAIA,IAAJ,EAAU;AACR,iBAAKC,GAAL,CAASZ,IAAT,EAAe,mBAAKW,IAAL,CAAf;AACD,WAFD,MAEO;AACL,iBAAKE,MAAL,CAAYb,IAAZ;AACD;AACF;AAPQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQV;AAED;;;;;;gCAGY;AAAA;AAAA;AAAA;;AAAA;AACV,8BAAyB,KAAKU,KAAL,EAAzB,mIAAuC;AAAA;AAAA,cAA7BV,IAA6B;AAAA,cAAvBc,KAAuB;;AACrC,eAAKF,GAAL,CAASZ,IAAT,EAAe,0BAAYc,KAAZ,CAAf;AACD;AAHS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIX;;;;EArGgCC,a","sourcesContent":["/**\n * Represents a suite of hypotheses and their probabilities.\n */\n\nimport Pmf from '../Pmf';\nimport { UnimplementedMethodException } from '../utils';\nimport { odds, probability } from '../helpers';\n\nexport default class Suite extends Pmf {\n  /**\n   * Updates each hypothesis based on the data.\n   * @param {any} data any representation of the data\n   * @returns the normalizing constant\n   */\n  update(data) {\n    for (let hypo of this.values()) {\n      const like = this.likelihood(data, hypo);\n      this.mult(hypo, like);\n    }\n    return this.normalize();\n  }\n\n  /**\n   * Updates a suite of hypotheses based on new data.\n   * Modifies the suite directly; if you want to keep the original, make a copy.\n   * Note: unlike Update, LogUpdate does not normalize.\n   * @param {any} any representation of the data\n   */\n  logUpdate(data) {\n    for (let hypo of this.values()) {\n      const like = this.logLikelihood(data, hypo);\n      this.incr(hypo, like);\n    }\n  }\n\n  /**\n   * Updates each hypothesis based on the dataset.\n   * This is more efficient than calling Update repeatedly because\n   * it waits until the end to Normalize.\n   * Modifies the suite directly; if you want to keep the original, make a copy.\n   * @param {array|set} dataset a sequence of data\n   * @returns the normalizing constant\n   */\n  updateSet(dataset) {\n    for (let data of [...dataset]) {\n      for (let hypo of this.values()) {\n        const like = this.likelihood(data, hypo);\n        this.mult(hypo, like);\n      }\n    }\n    return this.normalize();\n  }\n\n  /**\n   * Updates each hypothesis based on the dataset.\n   * Modifies the suite directly; if you want to keep the original, make a copy.\n   * @param {array|set} dataset a sequence of data\n   */\n  logUpdateSet(dataset) {\n    for (let data of dataset) {\n      this.logUpdate(data);\n    }\n  }\n\n  /**\n   * Computes the likelihood of the data under the hypothesis.\n   * This method needs implement by children class\n   * if not there is an `UnimplementedMethodException` would be throw\n   * @param {any} data some representation of the data\n   * @param {any} hypo some representation of the hypothesis\n   * @returns likelihood\n   */\n  likelihood(data, hypo) {\n    throw new UnimplementedMethodException();\n  }\n\n  /**\n   * Computes the log likelihood of the data under the hypothesis.\n   * This method needs implement by children class\n   * if not there is an `UnimplementedMethodException` would be throw\n   * @param {any} data some representation of the data\n   * @param {any} hypo some representation of the hypothesis\n   * @returns likelihood\n   */\n  logLikelihood(data, hypo) {\n    throw new UnimplementedMethodException();\n  }\n\n  /**\n   * Transforms from probabilities to odds.\n   * Values with prob=0 are removed.\n   */\n  makeOdds() {\n    for (let [hypo, prob] of this.items()) {\n      if (prob) {\n        this.set(hypo, odds(prob));\n      } else {\n        this.remove(hypo);\n      }\n    }\n  }\n\n  /**\n   * Transforms from odds to probabilities.\n   */\n  makeProbs() {\n    for (let [hypo, odds] of this.items()) {\n      this.set(hypo, probability(odds));\n    }\n  }\n}\n"],"file":"index.js"}